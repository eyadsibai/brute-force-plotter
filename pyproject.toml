[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "brute-force-plotter"
version = "0.1.0"
description = "Tool to visualize data quickly with no brain usage for plot creation"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Eyad Sibai", email = "eyad.alsibai@gmail.com"}
]
maintainers = [
    {name = "Eyad Sibai", email = "eyad.alsibai@gmail.com"}
]
keywords = ["visualization", "plotting", "data-analysis", "matplotlib", "seaborn"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Visualization",
]

dependencies = [
    "matplotlib>=3.10.7",
    "click>=8.3.0",
    "pandas>=2.3.3",
    "seaborn>=0.13.2",
    "pyarrow>=22.0.0",
    "dask[distributed]>=2025.10.0",
    "scipy>=1.10.0",
    "folium>=0.19.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.8.0",
    "pre-commit>=3.0.0",
]

[project.scripts]
brute-force-plotter = "src.brute_force_plotter:main"

[project.urls]
Homepage = "https://github.com/eyadsibai/brute-force-plotter"
Repository = "https://github.com/eyadsibai/brute-force-plotter"
Issues = "https://github.com/eyadsibai/brute-force-plotter/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[dependency-groups]
dev = []

[tool.ruff]
# Exclude common directories
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
]

# Same as Black (88 characters)
line-length = 88

# Assume Python 3.10+
target-version = "py310"

[tool.ruff.lint]
# Enable pycodestyle (E, W), Pyflakes (F), isort (I), and other useful rules
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # Pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "SIM",   # flake8-simplify
    "TCH",   # flake8-type-checking
    "Q",     # flake8-quotes
]

# Ignore specific rules that might be too strict for this project
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults (common with Click)
    "B904",  # Within an except clause, raise exceptions with raise ... from err
]

# Allow autofix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"

# Indent with spaces
indent-style = "space"

# Respect magic trailing commas
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-sort-within-sections = true

[tool.bandit]
exclude_dirs = [".venv", "tests", "example"]
skips = ["B101"]  # Skip assert warnings (common in tests)
